// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetWeatherForecast7daysParams creates a new GetWeatherForecast7daysParams object
// with the default values initialized.
func NewGetWeatherForecast7daysParams() GetWeatherForecast7daysParams {

	var (
		// initialize parameters with default values

		unitsDefault = string("metric")
	)

	return GetWeatherForecast7daysParams{
		Units: &unitsDefault,
	}
}

// GetWeatherForecast7daysParams contains all the bound params for the get weather forecast7days operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetWeatherForecast7days
type GetWeatherForecast7daysParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Название города
	  Required: true
	  In: query
	*/
	City string
	/*Единицы измерения температуры. 'metric' для Цельсия, 'imperial' для Фаренгейта.
	  In: query
	  Default: "metric"
	*/
	Units *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetWeatherForecast7daysParams() beforehand.
func (o *GetWeatherForecast7daysParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCity, qhkCity, _ := qs.GetOK("city")
	if err := o.bindCity(qCity, qhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	qUnits, qhkUnits, _ := qs.GetOK("units")
	if err := o.bindUnits(qUnits, qhkUnits, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCity binds and validates parameter City from query.
func (o *GetWeatherForecast7daysParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("city", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("city", "query", raw); err != nil {
		return err
	}
	o.City = raw

	return nil
}

// bindUnits binds and validates parameter Units from query.
func (o *GetWeatherForecast7daysParams) bindUnits(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetWeatherForecast7daysParams()
		return nil
	}
	o.Units = &raw

	if err := o.validateUnits(formats); err != nil {
		return err
	}

	return nil
}

// validateUnits carries on validations for parameter Units
func (o *GetWeatherForecast7daysParams) validateUnits(formats strfmt.Registry) error {

	if err := validate.EnumCase("units", "query", *o.Units, []interface{}{"metric", "imperial"}, true); err != nil {
		return err
	}

	return nil
}
