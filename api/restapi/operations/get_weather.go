// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetWeatherHandlerFunc turns a function with the right signature into a get weather handler
type GetWeatherHandlerFunc func(GetWeatherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWeatherHandlerFunc) Handle(params GetWeatherParams) middleware.Responder {
	return fn(params)
}

// GetWeatherHandler interface for that can handle valid get weather params
type GetWeatherHandler interface {
	Handle(GetWeatherParams) middleware.Responder
}

// NewGetWeather creates a new http.Handler for the get weather operation
func NewGetWeather(ctx *middleware.Context, handler GetWeatherHandler) *GetWeather {
	return &GetWeather{Context: ctx, Handler: handler}
}

/*
	GetWeather swagger:route GET /weather getWeather

# Получить текущую погоду

Возвращает текущие погодные данные для заданного города.
*/
type GetWeather struct {
	Context *middleware.Context
	Handler GetWeatherHandler
}

func (o *GetWeather) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWeatherParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetWeatherBadRequestBody get weather bad request body
//
// swagger:model GetWeatherBadRequestBody
type GetWeatherBadRequestBody struct {

	// Описание ошибки
	Error string `json:"error,omitempty"`

	// Детализированное сообщение об ошибке
	Message string `json:"message,omitempty"`
}

// Validate validates this get weather bad request body
func (o *GetWeatherBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get weather bad request body based on context it is used
func (o *GetWeatherBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWeatherBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWeatherBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetWeatherBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWeatherInternalServerErrorBody get weather internal server error body
//
// swagger:model GetWeatherInternalServerErrorBody
type GetWeatherInternalServerErrorBody struct {

	// Описание ошибки
	Error string `json:"error,omitempty"`

	// Детализированное сообщение об ошибке
	Message string `json:"message,omitempty"`
}

// Validate validates this get weather internal server error body
func (o *GetWeatherInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get weather internal server error body based on context it is used
func (o *GetWeatherInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWeatherInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWeatherInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetWeatherInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWeatherOKBody get weather o k body
//
// swagger:model GetWeatherOKBody
type GetWeatherOKBody struct {

	// Название города
	City string `json:"city,omitempty"`

	// Краткое описание погоды
	Description string `json:"description,omitempty"`

	// Ощущаемая температура
	FeelsLike float64 `json:"feels_like,omitempty"`

	// Влажность
	Humidity float64 `json:"humidity,omitempty"`

	// Температура в указанном городе
	Temperature float64 `json:"temperature,omitempty"`

	// Время последнего обновления данных
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Скорость ветра
	WindSpeed float64 `json:"wind_speed,omitempty"`
}

// Validate validates this get weather o k body
func (o *GetWeatherOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWeatherOKBody) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getWeatherOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get weather o k body based on context it is used
func (o *GetWeatherOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWeatherOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWeatherOKBody) UnmarshalBinary(b []byte) error {
	var res GetWeatherOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
