// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetWeatherForecast7daysHandlerFunc turns a function with the right signature into a get weather forecast7days handler
type GetWeatherForecast7daysHandlerFunc func(GetWeatherForecast7daysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWeatherForecast7daysHandlerFunc) Handle(params GetWeatherForecast7daysParams) middleware.Responder {
	return fn(params)
}

// GetWeatherForecast7daysHandler interface for that can handle valid get weather forecast7days params
type GetWeatherForecast7daysHandler interface {
	Handle(GetWeatherForecast7daysParams) middleware.Responder
}

// NewGetWeatherForecast7days creates a new http.Handler for the get weather forecast7days operation
func NewGetWeatherForecast7days(ctx *middleware.Context, handler GetWeatherForecast7daysHandler) *GetWeatherForecast7days {
	return &GetWeatherForecast7days{Context: ctx, Handler: handler}
}

/*
	GetWeatherForecast7days swagger:route GET /weather/forecast/7days getWeatherForecast7days

# Получить прогноз погоды на 7 дней

Возвращает прогноз погоды на 7 дней для заданного города.
*/
type GetWeatherForecast7days struct {
	Context *middleware.Context
	Handler GetWeatherForecast7daysHandler
}

func (o *GetWeatherForecast7days) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWeatherForecast7daysParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetWeatherForecast7daysOKBody get weather forecast7days o k body
//
// swagger:model GetWeatherForecast7daysOKBody
type GetWeatherForecast7daysOKBody struct {

	// Название города
	City string `json:"city,omitempty"`

	// Прогноз на следующие 7 дней
	Forecast []*GetWeatherForecast7daysOKBodyForecastItems0 `json:"forecast"`
}

// Validate validates this get weather forecast7days o k body
func (o *GetWeatherForecast7daysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateForecast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWeatherForecast7daysOKBody) validateForecast(formats strfmt.Registry) error {
	if swag.IsZero(o.Forecast) { // not required
		return nil
	}

	for i := 0; i < len(o.Forecast); i++ {
		if swag.IsZero(o.Forecast[i]) { // not required
			continue
		}

		if o.Forecast[i] != nil {
			if err := o.Forecast[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWeatherForecast7daysOK" + "." + "forecast" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getWeatherForecast7daysOK" + "." + "forecast" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get weather forecast7days o k body based on the context it is used
func (o *GetWeatherForecast7daysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateForecast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWeatherForecast7daysOKBody) contextValidateForecast(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Forecast); i++ {

		if o.Forecast[i] != nil {

			if swag.IsZero(o.Forecast[i]) { // not required
				return nil
			}

			if err := o.Forecast[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWeatherForecast7daysOK" + "." + "forecast" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getWeatherForecast7daysOK" + "." + "forecast" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWeatherForecast7daysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWeatherForecast7daysOKBody) UnmarshalBinary(b []byte) error {
	var res GetWeatherForecast7daysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWeatherForecast7daysOKBodyForecastItems0 get weather forecast7days o k body forecast items0
//
// swagger:model GetWeatherForecast7daysOKBodyForecastItems0
type GetWeatherForecast7daysOKBodyForecastItems0 struct {

	// Дата прогноза
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// Краткое описание погоды
	Description string `json:"description,omitempty"`

	// Максимальная температура
	TemperatureMax float64 `json:"temperature_max,omitempty"`

	// Минимальная температура
	TemperatureMin float64 `json:"temperature_min,omitempty"`
}

// Validate validates this get weather forecast7days o k body forecast items0
func (o *GetWeatherForecast7daysOKBodyForecastItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWeatherForecast7daysOKBodyForecastItems0) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(o.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get weather forecast7days o k body forecast items0 based on context it is used
func (o *GetWeatherForecast7daysOKBodyForecastItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetWeatherForecast7daysOKBodyForecastItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWeatherForecast7daysOKBodyForecastItems0) UnmarshalBinary(b []byte) error {
	var res GetWeatherForecast7daysOKBodyForecastItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
